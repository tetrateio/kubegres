<?xml version="1.0" encoding="UTF-8"?>
  <testsuites tests="98" disabled="92" errors="0" failures="4" time="535.282825417">
      <testsuite name="Controller Suite" package="/Users/sergicastro/tetrateio/kubegres/test" tests="98" disabled="0" skipped="92" errors="0" failures="4" time="535.282825417" timestamp="2024-11-11T12:21:27">
          <properties>
              <property name="SuiteSucceeded" value="false"></property>
              <property name="SuiteHasProgrammaticFocus" value="false"></property>
              <property name="SpecialSuiteFailureReason" value=""></property>
              <property name="SuiteLabels" value="[]"></property>
              <property name="RandomSeed" value="1731324087"></property>
              <property name="RandomizeAllSpecs" value="false"></property>
              <property name="LabelFilter" value="meh"></property>
              <property name="FocusStrings" value=""></property>
              <property name="SkipStrings" value=""></property>
              <property name="FocusFiles" value=""></property>
              <property name="SkipFiles" value=""></property>
              <property name="FailOnPending" value="false"></property>
              <property name="FailOnEmpty" value="false"></property>
              <property name="FailFast" value="false"></property>
              <property name="FlakeAttempts" value="0"></property>
              <property name="DryRun" value="false"></property>
              <property name="ParallelTotal" value="1"></property>
              <property name="OutputInterceptorMode" value=""></property>
          </properties>
          <testcase name="[BeforeSuite]" classname="Controller Suite" status="passed" time="62.250624208">
              <system-err>&gt; Enter [BeforeSuite] TOP-LEVEL - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:68 @ 11/11/24 12:21:27.49&#xA;STEP: bootstrapping test environment - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:76 @ 11/11/24 12:22:27.506&#xA;&lt; Exit [BeforeSuite] TOP-LEVEL - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:68 @ 11/11/24 12:22:29.74 (1m2.251s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;livenessProbe&#39; GIVEN new Kubegres is created with spec &#39;livenessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;livenessProbe&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;livenessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;livenessProbe&#39; set the value [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;livenessProbe&#39; GIVEN new Kubegres is created with spec &#39;livenessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;livenessProbe&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;livenessProbe&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;livenessProbe&#39; set the new value [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;serviceAccountName&#39; GIVEN new Kubegres is created without spec &#39;serviceAccountName&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with serviceAccountName &#39;default&#39; and a normal event should be logged [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;serviceAccountName&#39; GIVEN new Kubegres is created with spec &#39;serviceAccountName&#39; set to &#39;my-kubegres&#39; and spec &#39;replica&#39; set to 3 and later &#39;serviceAccountName&#39; is updated to &#39;changed-kubegres&#39; GIVEN new Kubegres is created with spec &#39;serviceAccountName&#39; set to &#39;my-kubegres&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;serviceAccountName&#39; set to &#39;kubegres [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;serviceAccountName&#39; GIVEN new Kubegres is created with spec &#39;serviceAccountName&#39; set to &#39;my-kubegres&#39; and spec &#39;replica&#39; set to 3 and later &#39;serviceAccountName&#39; is updated to &#39;changed-kubegres&#39; GIVEN existing Kubegres is updated with spec &#39;serviceAccountName&#39; set from &#39;my-kubegres&#39; to &#39;changed-kubegres&#39; THEN 1 primary and 2 replica should be re-deployed with spec &#39;serviceAccountName&#39; set to &#39;changed-kubegres&#39; [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.size&#39; GIVEN new Kubegres is created without spec &#39;database.size&#39; THEN an error event should be logged [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.size&#39; GIVEN new Kubegres is created with spec &#39;database.size&#39; set to &#39;300Mi&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.size&#39; is updated to &#39;400Mi&#39; GIVEN new Kubegres is created with spec &#39;database.size&#39; set to &#39;300Mi&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;database.size&#39; set to &#39;300Mi&#39; [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.size&#39; GIVEN new Kubegres is created with spec &#39;database.size&#39; set to &#39;300Mi&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.size&#39; is updated to &#39;400Mi&#39; GIVEN existing Kubegres is updated with spec &#39;database.size&#39; set from &#39;300Mi&#39; to &#39;400Mi&#39; THEN an error event should be logged [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.volumeMount&#39; GIVEN new Kubegres is created without spec &#39;database.volumeMount&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with &#39;database.volumeMount&#39; set to the value of the const &#39;KubegresContext.DefaultDatabaseVolumeMount&#39; and a normal event should be logged [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.volumeMount&#39; GIVEN new Kubegres is created with spec &#39;database.volumeMount&#39; set to &#39;/tmp/folder1&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.volumeMount&#39; is updated to &#39;/tmp/folder2&#39; GIVEN new Kubegres is created with spec &#39;database.volumeMount&#39; set to &#39;/tmp/folder1&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;database.volumeMount&#39; set to &#39;/tmp/folder1&#39; [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.volumeMount&#39; GIVEN new Kubegres is created with spec &#39;database.volumeMount&#39; set to &#39;/tmp/folder1&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.volumeMount&#39; is updated to &#39;/tmp/folder2&#39; GIVEN existing Kubegres is updated with spec &#39;database.volumeMount&#39; set from &#39;/tmp/folder1&#39; to &#39;/tmp/folder2&#39; THEN an error event should be logged [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;image&#39; GIVEN new Kubegres is created without spec &#39;image&#39; THEN An error event should be logged [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;image&#39; GIVEN new Kubegres is created with spec &#39;image&#39; set to &#39;postgres:14.4&#39; and spec &#39;replica&#39; set to 3 and later &#39;image&#39; is updated to &#39;postgres:14.5&#39; GIVEN new Kubegres is created with spec &#39;image&#39; set to &#39;postgres:14.4&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;image&#39; set to &#39;postgres:14.5&#39; [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;image&#39; GIVEN new Kubegres is created with spec &#39;image&#39; set to &#39;postgres:14.4&#39; and spec &#39;replica&#39; set to 3 and later &#39;image&#39; is updated to &#39;postgres:14.5&#39; GIVEN existing Kubegres is updated with spec &#39;image&#39; set from &#39;postgres:14.4&#39; to &#39;postgres:14.5&#39; THEN 1 primary and 2 replica should be re-deployed with spec &#39;image&#39; set to &#39;postgres:14.5&#39; [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, checking recovery works GIVEN Kubegres with 1 primary and no replicas AND that primary is deleted while its associated PVC is still available THEN the primary should be automatically re-created and the existing PVC should be associated to the new primary [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, checking recovery works GIVEN Kubegres with 1 primary and no replicas AND that primary is deleted including its associated PVC THEN the primary should be automatically re-created and a new PVC should be associated to the new primary [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, checking recovery works GIVEN Kubegres with 1 primary and 2 replicas AND primary is deleted THEN the failover should take place with a replica becoming primary AND a new replica created AND existing data available [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with a &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; which have a reserved name THEN 2 error events should be logged as it is not possible to use a reserved name [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with a &#39;volume.volumeMount&#39; which has a mountPath set to the path of Postgres database folder THEN an error event should be logged as it is not possible to use Postgres database as a mountPath [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; and later we update them and add additional volumes and finally we delete them GIVEN new Kubegres is created with a new custom &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; AND spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with one custom volume and volumeMount in StatefulSets [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; and later we update them and add additional volumes and finally we delete them GIVEN existing Kubegres is updated by updating by adding new and updating existing custom &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; THEN StatefulSets should be updated too [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; and later we update them and add additional volumes and finally we delete them GIVEN existing Kubegres is updated with the removal of one custom &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; THEN StatefulSets should be updated too [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; GIVEN new Kubegres is created with specs &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; and later we update them and add additional volumes and finally we delete them GIVEN existing Kubegres is updated with the removal of all custom &#39;volume.volume&#39; and &#39;volume.volumeMount&#39; THEN StatefulSets should be updated too [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Testing when there are 2 different Kubegres instances running in same namespace GIVEN new Kubegres is created with spec &#39;replica&#39; set to 2 THEN 1 primary and 2 replica should be created [group:1]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to nil THEN a validation error event should be logged [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 0 THEN a validation error event should be logged [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 1 THEN 1 primary and 0 replica should be created [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 2 THEN 1 primary and 2 replica should be created [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 4 THEN 1 more replica should be created [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 4 to 3 THEN 1 replica should be deleted [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;replica&#39; GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 1 THEN 2 replica should be deleted [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;port&#39; GIVEN new Kubegres is created without spec &#39;port&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with port &#39;5432&#39; and a normal event should be logged [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;port&#39; GIVEN new Kubegres is created with spec &#39;port&#39; set to &#39;5433&#39; and spec &#39;replica&#39; set to 3 and later &#39;port&#39; is updated to &#39;5434&#39; GIVEN new Kubegres is created with spec &#39;port&#39; set to &#39;5433&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;port&#39; set to &#39;5433 [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;port&#39; GIVEN new Kubegres is created with spec &#39;port&#39; set to &#39;5433&#39; and spec &#39;replica&#39; set to 3 and later &#39;port&#39; is updated to &#39;5434&#39; GIVEN existing Kubegres is updated with spec &#39;port&#39; set from &#39;5433&#39; to &#39;5434&#39; THEN 1 primary and 2 replica should be re-deployed with spec &#39;port&#39; set to &#39;5434&#39; [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;resource&#39; GIVEN new Kubegres is created without spec &#39;resources&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created without &#39;resources&#39; values  [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;resource&#39; GIVEN new Kubegres is created with spec &#39;resources&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;resources&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;resources&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;resources&#39; set the value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;resource&#39; GIVEN new Kubegres is created with spec &#39;resources&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;resources&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;resources&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;resources&#39; set the new value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with a &#39;volume.volumeClaimTemplate&#39; and &#39;volume.volumeMount&#39; which have a reserved name THEN 2 error events should be logged as it is not possible to use a reserved name [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with specs &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; and later it is updated by adding/removing &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with a new custom &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; AND spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with one custom volumeClaimTemplate and volumeMount in StatefulSets [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with specs &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; and later it is updated by adding/removing &#39;volume.volumeClaimTemplates&#39; GIVEN existing Kubegres is updated by adding new and updating existing custom &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; THEN StatefulSets should be updated too [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with specs &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; and later it is updated by adding/removing &#39;volume.volumeClaimTemplates&#39; GIVEN existing Kubegres is updated with the update of one custom &#39;volume.volumeClaimTemplates&#39; from 10Mi to 15Mi THEN an error event should be logged as it is not possible to update &#39;volume.volumeClaimTemplates&#39; [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;volume.volumeClaimTemplates&#39; GIVEN new Kubegres is created with specs &#39;volume.volumeClaimTemplates&#39; and &#39;volume.volumeMount&#39; and later it is updated by adding/removing &#39;volume.volumeClaimTemplates&#39; GIVEN existing Kubegres is updated with the removal of one custom &#39;volume.volumeClaimTemplates&#39; THEN an error event should be logged as it is not possible to update &#39;volume.volumeClaimTemplates&#39; [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.storageClassName&#39; GIVEN new Kubegres is created without spec &#39;database.storageClassName&#39; THEN it should be set to the &#39;standard&#39; storage class (which is the default one in our test cluster) [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.storageClassName&#39; GIVEN new Kubegres is created with spec &#39;database.storageClassName&#39; set to &#39;standard&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.storageClassName&#39; is updated to &#39;anything&#39; GIVEN new Kubegres is created with spec &#39;database.storageClassName&#39; set to &#39;standard&#39; and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;database.storageClassName&#39; set to &#39;standard&#39; [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;database.storageClassName&#39; GIVEN new Kubegres is created with spec &#39;database.storageClassName&#39; set to &#39;standard&#39; and spec &#39;replica&#39; set to 3 and later &#39;database.storageClassName&#39; is updated to &#39;anything&#39; GIVEN existing Kubegres is updated with spec &#39;database.storageClassName&#39; set from &#39;standard&#39; to &#39;anything&#39; THEN an error event should be logged [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Replica instances are not available, checking recovery works GIVEN Kubegres with 1 primary and 2 replica AND those 2 replicas are deleted THEN the missing 2 replica should be automatically re-created by Kubegres and the existing data replicated [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;readinessProbe&#39; GIVEN new Kubegres is created with spec &#39;readinessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;readinessProbe&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;readinessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;readinessProbe&#39; set the value [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;readinessProbe&#39; GIVEN new Kubegres is created with spec &#39;readinessProbe&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;readinessProbe&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;readinessProbe&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;readinessProbe&#39; set the new value [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] We set the wal-level to &#39;logical&#39; and simulate when Primary instance is not available then recovery/failover works GIVEN Kubegres custom ConfigMap with wal-level set to &#39;logical&#39; AND with 1 primary and 2 replicas AND primary is deleted THEN the failover should take place with a replica becoming primary AND a new replica created AND existing data available [group:1]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when failover is disabled checking NO failover should be triggered GIVEN Kubegres is creating a cluster with changing values for the number of deployed replicas AND in YAML the flag &#39;failover.isDisabled&#39; is true THEN a primary and a replica instances should be created as normal [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when failover is disabled checking NO failover should be triggered GIVEN Kubegres with 1 primary and 2 replicas AND once deployed we update YAML with &#39;failover.isDisabled&#39; is true AND we delete primary THEN the primary failover should NOT take place AND the deleted primary should NOT be replaced [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when failover is disabled checking NO failover should be triggered GIVEN Kubegres with 1 primary and 2 replicas AND once deployed we update YAML with &#39;failover.isDisabled&#39; is true AND we delete a replica THEN the replica failover should NOT take place AND the deleted replica should NOT be replaced [group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Checking changes in Primary DB is replicated in Replica DBs GIVEN new Kubegres is created with spec &#39;replica&#39; set to 3 AND data is inserted and then deleted from Primary DB THEN 1 primary and 2 replica should be created with inserted and deleted users should be replicated from Primary DB to Replica DB [group:1]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Checking changes in Primary DB is replicated in Replica DBs GIVEN existing Kubegres with &#39;replica&#39; set to 1, with data in PrimaryDB is updated from replica 1 to 4 THEN 1 primary and 3 replica should be created with all users present on all Replica DB [group:1]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when the promotion of a PostgreSql instance is manually requested THEN promotion should be triggered. GIVEN Kubegres with 1 primary and 1 replica AND once deployed we update YAML with &#39;failover.promotePod&#39; is set to a Pod name THEN the replica Pod set in spec &#39;failover.promotePod&#39; should become the new primary AND a new replica should be created [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when the promotion of a PostgreSql instance is manually requested THEN promotion should be triggered. GIVEN Kubegres with 1 primary and 1 replica AND once deployed we update YAML with &#39;failover.isDisabled&#39; is true AND with &#39;failover.promotePod&#39; is set to a Pod name THEN the replica Pod set in spec &#39;failover.promotePod&#39; should become the new primary AND a new replica should be created [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when the promotion of a PostgreSql instance is manually requested THEN promotion should be triggered. GIVEN Kubegres with 1 primary and 1 replica AND once deployed we update YAML with &#39;failover.promotePod&#39; is set to a Pod name which does NOT exist THEN nothing should happen AND an error message should be logged as event saying Pod does NOT exist [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Primary instances is not available, when the promotion of a PostgreSql instance is manually requested THEN promotion should be triggered. GIVEN Kubegres with 1 primary and 1 replica AND once deployed we update YAML with &#39;failover.promotePod&#39; is set the Primary Pod name THEN nothing should happen [group:4]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;securityContext&#39; GIVEN new Kubegres is created without spec &#39;securityContext&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with &#39;securityContext&#39; set to nil [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;securityContext&#39; GIVEN new Kubegres is created with spec &#39;securityContext&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;securityContext&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;securityContext&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;securityContext&#39; set the value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;securityContext&#39; GIVEN new Kubegres is created with spec &#39;securityContext&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;securityContext&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;securityContext&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;securityContext&#39; set the new value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Creating Kubegres with a custom namespace GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created [group:1, meh]" classname="Controller Suite" status="failed" time="375.466532208">
              <failure message="Timed out after 240.001s.&#xA;Expected&#xA;    &lt;bool&gt;: false&#xA;to be true" type="failed">[FAILED] Timed out after 240.001s.&#xA;Expected&#xA;    &lt;bool&gt;: false&#xA;to be true&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/util/testcases/DbQueryTestCases.go:67 @ 11/11/24 12:28:15.094&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:22:29.745&#xA;&lt; Exit [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:22:29.92 (175ms)&#xA;&gt; Enter [It] GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:62 @ 11/11/24 12:22:29.92&#xA;[FAILED] Timed out after 240.001s.&#xA;Expected&#xA;    &lt;bool&gt;: false&#xA;to be true&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/util/testcases/DbQueryTestCases.go:67 @ 11/11/24 12:28:15.094&#xA;&lt; Exit [It] GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:62 @ 11/11/24 12:28:15.094 (5m45.174s)&#xA;&gt; Enter [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:28:15.094&#xA;&lt; Exit [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:28:45.212 (30.118s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] Creating Kubegres with a custom namespace GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 4 THEN 1 more replica should be created [group:1, meh]" classname="Controller Suite" status="failed" time="30.090623083">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x1400032f360&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x1400032f360&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:28:45.272&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:28:45.212&#xA;&lt; Exit [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:28:45.272 (59ms)&#xA;&gt; Enter [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 4 THEN 1 more replica should be created - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:82 @ 11/11/24 12:28:45.272&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x1400032f360&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:28:45.272&#xA;&lt; Exit [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 4 THEN 1 more replica should be created - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:82 @ 11/11/24 12:28:45.272 (1ms)&#xA;&gt; Enter [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:28:45.272&#xA;&lt; Exit [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:29:15.303 (30.031s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] Creating Kubegres with a custom namespace GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 4 to 3 THEN 1 replica should be deleted [group:1, meh]" classname="Controller Suite" status="failed" time="30.062709291">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9220&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9220&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:29:15.344&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:29:15.303&#xA;&lt; Exit [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:29:15.343 (40ms)&#xA;&gt; Enter [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 4 to 3 THEN 1 replica should be deleted - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:102 @ 11/11/24 12:29:15.343&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9220&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:29:15.344&#xA;&lt; Exit [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 4 to 3 THEN 1 replica should be deleted - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:102 @ 11/11/24 12:29:15.344 (0s)&#xA;&gt; Enter [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:29:15.344&#xA;&lt; Exit [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:29:45.366 (30.022s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] Creating Kubegres with a custom namespace GIVEN new Kubegres is created in a custom namespace with spec &#39;replica&#39; set to 3 and then it is updated to different values GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 1 THEN 2 replica should be deleted [group:1, meh]" classname="Controller Suite" status="failed" time="30.104168208">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9ea0&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9ea0&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:29:45.444&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:29:45.367&#xA;&lt; Exit [BeforeEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:43 @ 11/11/24 12:29:45.442 (75ms)&#xA;&gt; Enter [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 1 THEN 2 replica should be deleted - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:122 @ 11/11/24 12:29:45.442&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.StatusError | 0x140000c9ea0&gt;: &#xA;    Kubegres.kubegres.reactive-tech.io &#34;my-kubegres&#34; not found&#xA;    {&#xA;        ErrStatus: {&#xA;            TypeMeta: {Kind: &#34;&#34;, APIVersion: &#34;&#34;},&#xA;            ListMeta: {&#xA;                SelfLink: &#34;&#34;,&#xA;                ResourceVersion: &#34;&#34;,&#xA;                Continue: &#34;&#34;,&#xA;                RemainingItemCount: nil,&#xA;            },&#xA;            Status: &#34;Failure&#34;,&#xA;            Message: &#34;Kubegres.kubegres.reactive-tech.io \&#34;my-kubegres\&#34; not found&#34;,&#xA;            Reason: &#34;NotFound&#34;,&#xA;            Details: {&#xA;                Name: &#34;my-kubegres&#34;,&#xA;                Group: &#34;kubegres.reactive-tech.io&#34;,&#xA;                Kind: &#34;Kubegres&#34;,&#xA;                UID: &#34;&#34;,&#xA;                Causes: nil,&#xA;                RetryAfterSeconds: 0,&#xA;            },&#xA;            Code: 404,&#xA;        },&#xA;    }&#xA;In [It] at: /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:162 @ 11/11/24 12:29:45.444&#xA;&lt; Exit [It] GIVEN existing Kubegres is updated with spec &#39;replica&#39; set from 3 to 1 THEN 2 replica should be deleted - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:122 @ 11/11/24 12:29:45.444 (2ms)&#xA;&gt; Enter [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:29:45.444&#xA;&lt; Exit [AfterEach] Creating Kubegres with a custom namespace - /Users/sergicastro/tetrateio/kubegres/test/custom_namespace_test.go:52 @ 11/11/24 12:30:15.477 (30.027s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created without spec &#39;backup&#39; AND with spec &#39;replica&#39; set to 3 THEN backup CronJob is NOT created AND 1 primary and 2 replicas are deployed [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created without spec &#39;backup.schedule&#39; BUT with spec &#39;backup.volumeMount&#39; AND with spec &#39;backup.pvcName&#39; AND with spec &#39;replica&#39; set to 3 THEN backup CronJob is NOT created AND 1 primary and 2 replicas are deployed [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with spec &#39;backup.schedule&#39; BUT WITHOUT spec &#39;backup.volumeMount&#39;&#39; THEN an error event should be logged [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with spec &#39;backup.schedule&#39; AND &#39;backup.volumeMount&#39; BUT WITHOUT spec &#39;backup.pvcName&#39;&#39; THEN an error event should be logged [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with spec &#39;backup.schedule&#39; AND &#39;backup.volumeMount&#39; AND &#39;backup.pvcName&#39; BUT the given PVC is NOT deployed&#39; THEN an error event should be logged saying PVC is NOT deployed [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with spec &#39;backup.schedule&#39; AND &#39;backup.volumeMount&#39; AND &#39;backup.pvcName&#39; and the given PVC is deployed THEN backup CronJob is created AND 1 primary and 2 replicas are deployed [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with backup specs set AND later Kubegres is updated with new values for backup specs THEN backup CronJob is updated with the new backup specs [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with backup specs set AND later the Kubernetes field &#39;spec.customConfig&#39; is changed the Kubernetes field &#39;spec.customConfig&#39; is changed to a configMap which does NOT contain &#39;backup_database.sh&#39; THEN backup CronJob should NOT be updated and should remain with configMap set to the base configMap [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with backup specs set AND later the Kubernetes field &#39;spec.customConfig&#39; is changed the Kubernetes field &#39;spec.customConfig&#39; is changed to a configMap which contain &#39;backup_database.sh&#39; THEN backup CronJob should be updated with the configMap name set to the new custom configMap [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;backup.*&#39; GIVEN new Kubegres is created with backup specs set AND later Kubegres is updated with backup disabled THEN existing backup CronJob is deleted [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Creating Kubegres with custom annotations GIVEN new Kubegres is created with custom annotations and with spec &#39;replica&#39; set to 3 GIVEN new Kubegres is created with with custom annotations and with spec &#39;replica&#39; set to 3 THEN it should be deployed with StatefulSets and Pods containing the custom annotations AND 1 primary and 2 replica should be created [group:1]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created without spec &#39;customConfig&#39; and spec &#39;replica&#39; set to 3 THEN the spec &#39;customConfig&#39; is set to the value of the constant &#39;KubegresContext.BaseConfigMapName&#39; AND 1 primary and 2 replicas are deployed [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to a non existent ConfigMap THEN an error event should be logged [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to a ConfigMap which is empty THEN the base-config should be used for &#39;postgres.conf&#39;, &#39;primary_init_script.sh&#39; and &#39;pg_hba.conf&#39;&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to a ConfigMap containing &#39;postgres.conf&#39; THEN the custom-config should be used for &#39;postgres.conf&#39; AND the base-config should be used for &#39;primary_init_script.sh&#39; and &#39;pg_hba.conf&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to a ConfigMap containing &#39;primary_init_script.sh&#39; THEN the custom-config should be used for &#39;primary_init_script.sh&#39; AND the base-config should be used for &#39;postgres.conf&#39; and &#39;pg_hba.conf&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to a ConfigMap containing &#39;pg_hba.conf&#39; THEN the custom-config should be used for &#39;pg_hba.conf&#39; AND the base-config should be used for &#39;postgres.conf&#39; and &#39;primary_init_script.sh&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with spec &#39;customConfig&#39; set to base-config AND later it is updated to a configMap containing data-key &#39;postgres.conf&#39; THEN the custom-config should be used for &#39;postgres.conf&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with backUp enabled and spec &#39;customConfig&#39; set to a ConfigMap containing &#39;backup_database.sh&#39; THEN the custom-config should be used for &#39;backup_database.sh&#39; AND the base-config should be used for &#39;postgres.conf&#39;, &#39;pg_hba.conf&#39; and &#39;primary_init_script.sh&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres specs &#39;customConfig&#39; GIVEN new Kubegres is created with backUp enabled and spec &#39;customConfig&#39; set to base-config AND later it is updated to a configMap containing data-key &#39;backup_database.sh&#39; THEN the custom-config should be used for &#39;postgres.conf&#39; AND the base-config should be used for &#39;postgres.conf&#39;, &#39;pg_hba.conf&#39; and &#39;primary_init_script.sh&#39; [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;env.*&#39; GIVEN new Kubegres is created without environment variable of postgres super-user password THEN an error event should be logged saying the super-user password is missing [group:1, group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;env.*&#39; GIVEN new Kubegres is created without environment variable of postgres replication-user password THEN an error event should be logged saying the replication-user password is missing [group:1, group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;env.*&#39; GIVEN new Kubegres is created with all environment variables AND spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with all environment variables [group:1, group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;env.*&#39; GIVEN new Kubegres is created with all environment variables and a custom one AND spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with all environment variables including the custom one too [group:1, group:3]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.tolerations&#39; GIVEN new Kubegres is created without spec &#39;scheduler.tolerations&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with &#39;scheduler.tolerations&#39; set to nil [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.tolerations&#39; GIVEN new Kubegres is created with spec &#39;scheduler.tolerations&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;scheduler.tolerations&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;scheduler.tolerations&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;scheduler.tolerations&#39; set the value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.tolerations&#39; GIVEN new Kubegres is created with spec &#39;scheduler.tolerations&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;scheduler.tolerations&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;scheduler.tolerations&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;scheduler.tolerations&#39; set the new value [group:5]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.affinity&#39; GIVEN new Kubegres is created without spec &#39;scheduler.affinity&#39; and with spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with &#39;scheduler.affinity&#39; set to default value [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.affinity&#39; GIVEN new Kubegres is created with spec &#39;scheduler.affinity&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;scheduler.affinity&#39; is updated to a new value GIVEN new Kubegres is created with spec &#39;scheduler.affinity&#39; set to a value and spec &#39;replica&#39; set to 3 THEN 1 primary and 2 replica should be created with spec &#39;scheduler.affinity&#39; set the value [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] Setting Kubegres spec &#39;scheduler.affinity&#39; GIVEN new Kubegres is created with spec &#39;scheduler.affinity&#39; set to a value and spec &#39;replica&#39; set to 3 and later &#39;scheduler.affinity&#39; is updated to a new value GIVEN existing Kubegres is updated with spec &#39;scheduler.affinity&#39; set to a new value THEN 1 primary and 2 replica should be re-deployed with spec &#39;scheduler.affinity&#39; set the new value [group:2]" classname="Controller Suite" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[AfterSuite]" classname="Controller Suite" status="passed" time="7.301106666">
              <system-err>&gt; Enter [AfterSuite] TOP-LEVEL - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:135 @ 11/11/24 12:30:15.478&#xA;STEP: tearing down the test environment - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:139 @ 11/11/24 12:30:15.478&#xA;&lt; Exit [AfterSuite] TOP-LEVEL - /Users/sergicastro/tetrateio/kubegres/test/suite_test.go:135 @ 11/11/24 12:30:22.782 (7.301s)&#xA;</system-err>
          </testcase>
      </testsuite>
  </testsuites>